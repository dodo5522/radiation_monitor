' class diagram
@startuml

package event #DDDDDD {
    package base #FFFFFF {
        class IEventListener {
            #q_
            #thread_
            +start()
            +stop()
            +join()
            +put_q()
            +join_q()
            #thread_main()
            #is_condition()
            #run_in_condition()
        }
        class IEventTrigger {
            #event_handlers
            +start() {redefines start()}
            +stop() {redefines stop()}
            +join() {redefines join()}
            +append()
            #is_condition() {redefines is_condition()}
            #run_in_condition() {redefines run_in_condition()}
        }
        class IEventHandler {
            #run()
            #is_condition() {redefines is_condition()}
            #run_in_condition() {redefines run_in_condition()}
        }

        IEventListener <|-- IEventTrigger
        IEventListener <|-- IEventHandler
    }
package trigger #FFFFFF {
        class DataIsUpdatedTrigger {
        }
        class RadiationLimitTrigger {
        }

        IEventTrigger <|-- DataIsUpdatedTrigger
        IEventTrigger <|-- RadiationLimitTrigger
    }

    package handler #FFFFFF {
        class KeenIoEventHandler {
        }
        class XivelyEventHandler {
        }
        class TweetBotEventHandler {
        }

        IEventHandler <|-- KeenIoEventHandler
        IEventHandler <|-- XivelyEventHandler
        IEventHandler <|-- TweetBotEventHandler
    }
}

package threading #DDDDDD {
    class Thread {
        +start()
        +join()
        #run()
    }
}

package source #DDDDDD {
    class GeigerMeter {
        +stop()
        #run() {redefines run()}
        -wait_for_radiation()
    }

    Thread <|-- GeigerMeter
}

package logger #DDDDDD {
}

package argparse #DDDDDD {
}
@enduml
