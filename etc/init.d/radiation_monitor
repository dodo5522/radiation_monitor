#!/bin/sh
### BEGIN INIT INFO
# Provides:          radiation_monitor
# Required-Start:    networking
# Required-Stop:     networking
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: radiation_monitor
### END INIT INFO

NAME=radiation_monitor
SCRIPTNAME=$0
CONFIG_FILE=/etc/default/$(basename ${SCRIPTNAME})
PID_FILE=/var/run/$(basename ${SCRIPTNAME}).pid
DAEMON=/usr/local/bin/radiation_monitor

. ${CONFIG_FILE}

[ "${DEBUG}" = 'NO' ] || DEBUG_ARGS='--debug'
[ "${BATTERY_MONITOR_ENABLED}" = 'NO' ] || ENABLE_BATTERY_MONITOR='-be'
[ "${ALL_STATUS_ENABLED}" = 'NO' ] || ENABLE_ALL_STATUS='--get-all-status'

DAEMON_ARGS="-i ${INTERVAL} -l ${LOG} ${DEBUG_ARGS} ${ENABLE_ALL_STATUS} \
    -xa ${XIVELY_API_KEY} -xf ${XIVELY_FEED_KEY} \
    -kp ${KEENIO_PROJECT_ID} -kw ${KEENIO_WRITE_KEY} \
    -bl ${BATTERY_LIMIT_VOLTAGE} -bs ${BATTERY_LIMIT_HOOK_SCRIPT} -bf ${BATTERY_LIMIT_FULL_VOLTAGE} ${ENABLE_BATTERY_MONITOR} \
    -ch ${CHARGE_CURRENT_HIGH} \
    -tck ${TWITTER_CONSUMER_KEY} -tcs ${TWITTER_CONSUMER_SECRET} -tk ${TWITTER_KEY} -ts ${TWITTER_SECRET}"

do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --pidfile $PID_FILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PID_FILE --exec $DAEMON --background --make-pidfile -- \
		$DAEMON_ARGS \
		|| return 2
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --pidfile $PID_FILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  restart)
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) echo $(basename $DAEMON) has restarted. ;;
			1) echo Old process is still running. ;;
			*) echo Failed to start. ;;
		esac
		;;
	  *)
		echo Failed to stop
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart}" >&2
	exit 3
	;;
esac
:
